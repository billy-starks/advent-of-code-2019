class IntCode:
    def __init__(self):
        self.memory = []
    
    def load_program(self, input):
        with open(input, 'r') as file:
            data = file.read()
            data = data.strip()
            data = data.split(',')
            self.memory = data

    def run_program(self):
        pos = 0
        while True:
            opcode, p1mode, p2mode, p3mode  = _process_instruction(self.memory[pos])
            
            if opcode == 1:
                pos1, pos2, pos3 = int(self.memory[pos+1]), int(self.memory[pos+2]), int(self.memory[pos+3])
                value = int(self.memory[pos1]) + int(self.memory[pos2])
                self.memory[pos3] = value
                pos += 4
                
            elif opcode == 2:
                pos1, pos2, pos3 = int(self.memory[pos+1]), int(self.memory[pos+2]), int(self.memory[pos+3])
                value = int(self.memory[pos1]) * int(self.memory[pos2])
                self.memory[pos3] = value
                pos += 4
                
            elif opcode == 99:
                return self.memory
            
            else:
                raise Exception("Invalid Opcode {} at {}".format(opcode, pos))
                
    def _process_instruction(instruction):
        opcode = int(instruction[-2:])
        param1mode = int(instruction[-3]) if len(instruction) >= 3 else 0
        param2mode = int(instruction[-4]) if len(instruction) >= 4 else 0
        param3mode = int(instruction[-5]) if len(instruction) >= 5 else 0
